// TODO: can I get rid of this class? We use it a ton
// to directly query for a particular participant. So maybe we still abstract it
// and change that end-point to be more direct for the use cases that aren't a sync?
//

@RestResource(urlMapping='/participants/currentandfuture/*')
global without sharing class BZ_ProgramParticipantInfoService
{
    // Returns a list of Participant objects for current and future Programs.
    // Takes 3 optional params:
    //   program_id: if specified, filters the participants down to just that program
    //   contact_id: if specified, filters the participants down to just that contact
    //   last_modified_date: if specified, filters the participants down to only those edited after this date.
    //
    // Note: the client side switched to call directly into the: /services/data/v48.0/query?q=blah
    // API to get Program information since it's the same for all Participants in the program.
    // This is only participant specific info.
    @HttpGet
    global static List<BZ_ParticipantService> doGet(){
        RestRequest req= RestContext.request;
        RestResponse res= RestContext.response;

        // TODO: figure out what format the last_modified_since string should be pass in as
        // and then add that to the SOQL query to only get records modified after that date.
        // Note that the LastModifiedDate is returned in this format: 2020-04-06T20:19:23.000+0000
        // See these articles to help:
        // https://albasfdc.com/2016/03/28/working-with-datetimes/
        // https://support.workato.com/support/solutions/articles/1000236426-salesforce-object-query-language-soql-basic-syntax-and-common-search-terms
        // https://nextgensalesforce.wordpress.com/2015/11/30/dynamic-soql-query-results-in-local-time/
        // valueOfGmt() method here: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_methods_system_datetime.htm
        //
        // UPDATE: the last_modified_since param was never implemented, but we did default
        // to only getting Participants modified within the past year. I put that
        // logic inside the BZ_ParticipantServiceFactory.getParticipants() method below
        // and am just throwing away this param for now. If we ever do decide to implement this,
        // go fix this up. When passing a WHERE clause to the factory, can't use variables like
        // ' AND LastModifiedDate > :lastModifiedSince' for example, so we either need to convert to
        // string or pass the variables as params to the factory method and have it evaluate them.
        // Here is the error returned if you try and pass the above condition in the WHERE clause:
        // "[{\"errorCode\":\"APEX_ERROR\",\"message\":\"System.QueryException: line 1:1063 no viable alternative at character '<EOF>'\\n\\nClass.BZ_ParticipantServiceFactory.getParticipants: line 37, column 1\\nClass.BZ_ProgramParticipantInfoService.doGet: line 43, column 1\"}]"
        //
        //String lastModifiedSinceParam = req.params.get('last_modified_since');
        //DateTime lastModifiedSince = DateTime.now().addYears(-1); // Default to get all records modified within the last year.
        //if (lastModifiedSinceParam != null) lastModifiedSince = DateTime.valueOfGmt(lastModifiedSinceParam);

        String programId = req.params.get('program_id');
        String contactId = req.params.get('contact_id');

        String whereClause = '(Program__r.status__c=\'Current\' OR Program__r.status__c=\'Future\')';
        if (contactId != null) whereClause += ' AND Contact__r.Id = \'' + contactId + '\'';
        if (programId != null) whereClause += ' AND Program__r.Id = \'' + programId + '\'';

        List<Participant__c> participants = BZ_ParticipantServiceFactory.getParticipants(whereClause);

        // Turn the Participant__c sObjects into Apex objects representing the JSON to return.
        List<BZ_ParticipantService> participantServices =
            BZ_ParticipantServiceFactory.getParticipantServices(participants);
        return participantServices;
    }
}
