@isTest 
private class BZ_CloseRecruitmentController_TEST {
    static testMethod void validateRun() {
        
        List<Contact> contactsToInsert = new List<Contact>();
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner', OwnerId=userInfo.getUserId());
        contactsToInsert.add(campaignOwner);
        Contact contactWaitlist = new Contact(FirstName='Test', LastName='UserWaitlisted', Volunteer_Information__c='LC Pipeline');
        contactsToInsert.add(contactWaitlist);
        Contact contactOptedOutDropped = new Contact(FirstName='Test', LastName='UserOptedOutDropped', Volunteer_Information__c='LC Pipeline');
        contactsToInsert.add(contactOptedOutDropped);
        Contact contactOptedOutNoTime = new Contact(FirstName='Test', LastName='UserOptedOutNoTime', Volunteer_Information__c='LC Pipeline');
        contactsToInsert.add(contactOptedOutNoTime);
        Contact contactConfirmed = new Contact(FirstName='Test', LastName='UserConfirmed', Volunteer_Information__c='Current LC');
        contactsToInsert.add(contactConfirmed);
        insert contactsToInsert;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Leadership Coaches');
        String campaignBeingClosedName = 'TestCamp22';
        campaign.name=campaignBeingClosedName;
        String reinviteEmailTemplateName = 'reinviteEmailTemplate';
        campaign.Previous_Candidate_New_Invite__c = reinviteEmailTemplateName;
        insert campaign;
        
        List<CampaignMember> campaignMembersToInsert = new List<CampaignMember>();
        CampaignMember cmWaitlist = new CampaignMember();
        cmWaitlist.CampaignId=campaign.Id;
        cmWaitlist.ContactId=contactWaitlist.Id;
        cmWaitlist.Candidate_Status__c = 'Waitlisted';
        cmWaitlist.Application_Status__c = 'Submitted';
        campaignMembersToInsert.add(cmWaitlist);
        
        CampaignMember cmOptedOutDropped = new CampaignMember();
        cmOptedOutDropped.CampaignId=campaign.Id;
        cmOptedOutDropped.ContactId=contactOptedOutDropped.Id;
        cmOptedOutDropped.Candidate_Status__c = 'Opted Out';
        cmOptedOutDropped.Opted_Out_Reason__c = 'Dropped - During Program';
        cmOptedOutDropped.Application_Status__c = 'Submitted';
        campaignMembersToInsert.add(cmOptedOutDropped);
        
        CampaignMember cmOptedOutNoTime = new CampaignMember();
        cmOptedOutNoTime.CampaignId=campaign.Id;
        cmOptedOutNoTime.ContactId=contactOptedOutNoTime.Id;
        cmOptedOutNoTime.Candidate_Status__c = 'Opted Out';
        cmOptedOutNoTime.Opted_Out_Reason__c = 'No Time';
        cmOptedOutNoTime.Application_Status__c = 'Submitted';
        campaignMembersToInsert.add(cmOptedOutNoTime);
        
        CampaignMember cmConfirmed = new CampaignMember();
        cmConfirmed.CampaignId=campaign.Id;
        cmConfirmed.ContactId=contactConfirmed.Id;
        cmConfirmed.Candidate_Status__c = 'Confirmed';
        cmConfirmed.Application_Status__c = 'Submitted';
        campaignMembersToInsert.add(cmConfirmed);
        
        insert campaignMembersToInsert;
        
        List<Task> tasksToInsert = new List<Task>();
        Task tWaitlist = new Task(Subject='Test CampaignWaitlist', CampaignMemberId__c=cmWaitlist.Id, WhoId=contactWaitlist.Id, WhatId=campaign.Id);
        tasksToInsert.add(tWaitlist);
        Task tOptedOutDropped = new Task(Subject='Test CampaignOptedOutDropped', CampaignMemberId__c=cmOptedOutDropped.Id, WhoId=contactOptedOutDropped.Id, WhatId=campaign.Id);
        tasksToInsert.add(tOptedOutDropped);
        Task tOptedOutNoTime = new Task(Subject='Test CampaignOptedOutNoTime', CampaignMemberId__c=cmOptedOutNoTime.Id, WhoId=contactOptedOutNoTime.Id, WhatId=campaign.Id);
        tasksToInsert.add(tOptedOutNoTime);
        Task tConfirm = new Task(Subject='Test CampaignConfirm', CampaignMemberId__c=cmConfirmed.Id, WhoId=contactConfirmed.Id, WhatId=campaign.Id);
        tasksToInsert.add(tConfirm);
        
        insert tasksToInsert;
        
        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        
        PageReference pageRef = Page.BZ_CloseRecruitment;
        Test.setCurrentPage(pageRef);
        
        Boolean exceptionCaught = false;
        BZ_CloseRecruitmentController controller = new BZ_CloseRecruitmentController(sc);
        //PageReference result1= controller.createNewCampaign(oldCampaign);
        String newCampaignName = 'newTestCamp';
        String newAvailableMeetingTimes = '6 To 9';
        string parentId = campaign.Id;
        Date startDate = Date.newInstance(2019, 1, 5);
        Date endDate = Date.newInstance(2019, 5, 30);
        String studentCourseId = '10';
        String coachCourseId = '26';
        controller.m_newCampaignName = newCampaignName;
        controller.m_newAvailableMeetingTimes = newAvailableMeetingTimes;
        //controller.m_campaignSnapshot.ParentId=parentId;
        controller.m_campaign.StartDate = startDate;
        controller.m_campaign.EndDate = endDate;
        controller.m_campaign.Target_Course_ID_In_LMS__c = studentCourseId;
        controller.m_campaign.Coach_Course_ID__c = coachCourseId;
        
        Test.startTest();
        try {
            
            PageReference result = controller.run();
        } catch(BZ_CloseRecruitmentController.BZ_CloseRecruitmentException e){
            exceptionCaught = true;
        }
        Test.stopTest();
        System.AssertEquals(false, exceptionCaught);
        System.AssertEquals(false, BZ_CloseRecruitmentController.IsCloseRecruitmentRunning);
        System.AssertEquals(false, BZ_Notifications.disableNotifyApplyNow);
        System.AssertEquals(false, BZ_CloseRecruitmentController.IsCloseRecruitmentRunning);
        
        System.assert(controller.m_newCampaignName == newCampaignName, 'The BZ_CloseRecruitmentController should have newCampaignName = '+newCampaignName +' . Not newCampaignName ='+controller.m_newCampaignName);
        System.assert(controller.m_newAvailableMeetingTimes == newAvailableMeetingTimes, 'The BZ_CloseRecruitmentController should have newAvailableMeetingTimes = '+newAvailableMeetingTimes +' . Not newAvailableMeetingTimes ='+controller.m_newAvailableMeetingTimes);
        
        Campaign newCampaign = [Select ParentId, Coach_Course_ID__c FROM Campaign WHERE ParentId =: campaign.Id];
        Campaign closedCampaign = [SELECT Id FROM Campaign WHERE Name =: campaignBeingClosedName];
        System.Assert(newCampaign.Id!=null,'New Campaign not created');
        System.assertEquals(coachCourseId, newCampaign.Coach_Course_ID__c, 'New Campaign coachCourseId should be ' + coachCourseId + '. newCampaign.Coach_Course_ID__c = ' + newCampaign.Coach_Course_ID__c);
        System.assert(closedCampaign != null, 'Didnt find a campaign snapshot named ' + campaignBeingClosedName);
        System.assert(newCampaign.ParentId == closedCampaign.Id, 'The Closed Campaign should be set to the parent of the Active campaign.  newCampaign.ParentId = '+newCampaign.ParentId+' . Not closedCampaign.Id ='+closedCampaign.Id );
        System.Assert(controller.getEmailTemplates() != null, 'controller.getEmailTemplates() is null');
        
    }
    
    static testMethod void validateFailedRun() {
        Contact campaignOwner = new Contact(FirstName='Test', LastName='CampaignOwner2', OwnerId=userInfo.getUserId());
        insert campaignOwner;
        
        // Note: the Campaign.OwnerId refers to the User, so we need to use campaignOwner.OwnerId instead of Id.  See the child relationship of the User object.
        Campaign campaign = BZ_CampaignFactory_TEST.create(campaignOwner.OwnerId, 'Blah');
        campaign.Previous_Candidate_New_Invite__c = 'PrevEmailTemplate';
        insert campaign;
        
        ApexPages.StandardController sc = new ApexPages.standardController(campaign);
        
        PageReference pageRef = Page.BZ_CloseRecruitment;
        Test.setCurrentPage(pageRef);
        
        BZ_CloseRecruitmentController controller = new BZ_CloseRecruitmentController(sc);
        
        Boolean exceptionCaught = false;
        Test.startTest();
        // Don't set the newCampaign name, which causes it to fail.
        try {
            PageReference result = controller.run();
        } catch(BZ_CloseRecruitmentController.BZ_CloseRecruitmentException e){
            exceptionCaught = true;
        }
        Test.stopTest();
        
        System.AssertEquals(true, exceptionCaught);
        System.AssertEquals(false, BZ_Notifications.disableNotifyApplyNow);
        System.AssertEquals(false, BZ_CloseRecruitmentController.IsCloseRecruitmentRunning);
        
    }
}
