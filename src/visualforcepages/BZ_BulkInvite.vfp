<!-- Page that handles the "Bulk Invite" button on a Campaign. -->
<apex:page standardController="Campaign" lightningStyleSheets="true" extensions="BZ_BulkInviteController">
  <apex:form >
    <apex:pageMessages id="messages"/>
    <apex:pageBlock id="uploadSection" rendered="{!hasStarted==false}">
        <apex:pageMessage severity="confirm" 
                          title="Upload a .csv file of user information to add to this campaign"
                          summary="The users uploaded will be added to this campaign as Prospects and have an INVITE email or REINVITE email queued up depending on if they've signed up in the past and have an account or not.  On the next screen, you'll have the option to send them a text message." />
        Note: the reason that users with existing accounts who have signed up in the past
        get a REINVITE email instead of an INVITE email is because the instructions should just 
        have them log back into their account instead of asking them to signup again.
        If they try to signup, it will say their email is already registered 
        or they will lose previous application information they already filled out if they 
        signup with a new email. <font color="blue">Make sure the email templates are set accordingly!</font>
        <br/> <br/>
        <!--  Component to allow user to upload file from local machine -->
        <div style="border:2px solid red; padding:15px">
        <apex:inputFile value="{!contentFile}" filename="{!nameFile}" />
        <apex:commandButton action="{!ReadFile}" value="Invite Them!" id="uploadButton" style="width:150px;"/>
        </div>
        <br/> <br/>
        <font color="red"> <b>Note: </b></font> the .csv should have 8 columns with the info below. 
        <br/><br/> To create one, simply 
        <ol>
            <li>Open Excel</li>
            <li>Copy and paste the table below into a new worksheet</li>
            <li>Add the users you want to invite</li>
            <li>Choose File -> Save</li>
            <li>Change the File Format to 'CSV UTF-8 (Comma delimited)(.csv)</li>
            <li>And Save it!</li>
        </ol>
        <br/>
        <table border="1">
            <tr>
            <td style="padding:0 10px 0 10px;">First Name</td>
            <td style="padding:0 10px 0 10px;">Last Name</td>
            <td style="padding:0 10px 0 10px;">Email</td>
            <td style="padding:0 10px 0 10px;">Phone</td>
            <td style="padding:0 10px 0 10px;">Major</td>
            <td style="padding:0 10px 0 10px;">Anticipated Graduation Date</td>
            <td style="padding:0 10px 0 10px;">InteractionType</td>
            <td style="padding:0 10px 0 10px;">InteractionDescription</td>
            </tr>
        </table>
        <br/><br/>
        The value of the InteractionType MUST exactly match the available values for a <a href="https://na17.salesforce.com/00No0000008PVQD?setupid=ActivityFields">Task or Activity</a>.
        At the time of writing, the possible values for InteractionType are following (but that could change):
        <ul>
            <li>Email</li>
            <li>Phone Call</li>
            <li>Voicemail</li>
            <li>Text Message</li>
            <li>Camera to Camera Virtual Meeting</li>
            <li>1:1 In-Person Meeting</li>
            <li>Small Group In-Person Meeting</li>
            <li>Interaction at Larger Function</li>
            <li>Attended BZ Function</li>
            <li>Classroom Presentation</li>
            <li>Student Org Presentation</li>
        </ul>
        <em>Notes:</em>
        <ul>
            <li>The InteractionDescription is also used to set the Initial Connection on the Contact record</li>
            <li>The Primary Affiliation is set to the value of the Program Site on the Campaign</li>
            <li>For Fellows, the Undergraduate University is set to the Program Site on the Campaign.  You can change this after if you'd like.</li>
        </ul>
    </apex:pageBlock>
      <apex:pageBlock id="processStatus" rendered="{!hasStarted && textMessagesSent==false}">
          <apex:outputText value="Bulk Invite is running.  It may take a minute or two.  The status will be shown when it finishes.<br/><br/>" escape="false" rendered="{!hasStarted&&hasCompleted==false}"/>
          <apex:outputText value="{!progressString}" id="progress" escape="false"/>
          <apex:actionPoller enabled="{!hasStarted&&hasCompleted==false}" action="{!checkComplete}" interval="5" reRender="processStatus,progress,sendTextMessageSection"/>
      </apex:pageBlock>
    <apex:outputPanel id="sendTextMessageSection" style="display:block;width:100%;"> <!-- Needed to rerender child on button press.  Cant do it directly. -->
    <apex:pageBlock rendered="{!contactsLoaded==true && hasCompleted==true && textMessagesSent==false}">
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited}">
            <strong>The following contacts have been added to the Campaign and have an INVITE or INTRO email queued up depending on if they already have an account (aka they have signed up in the past).</strong>
            <br/>
            <apex:pageBlockSectionItem >
                <apex:outputText id="previewContactsToInvite" value="{!contactsToInviteDisplay}" escape="false">
                </apex:outputText>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited==false}">
            <strong>No contacts were found that could be invited to this campaign.</strong>
            <br/>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenSkipped}">
            <strong>The following contacts were skipped because they have either already been Bulk Invited to this campaign or they signed up on their own.</strong>
            <br/>
            <apex:pageBlockSectionItem >
                <apex:outputText value="{!contactsSkippedDisplay}" escape="false">
                </apex:outputText>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited}">
            <apex:pageBlockSectionItem >
            <apex:outputText >
                <br/>
                If you would also like to send them a text message invite, edit the message below and press "Send Text Invites!" below. 
                <br/>
                <br/>
                <div style="padding-left: 20px;">
                <em>* Note: only those with a Phone number specified will receive a text.</em>
                <br/>
                <em>* Note: only the {&#33;Contact.FirstName} merge field is supported.</em>
                </div>
            </apex:outputText>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited}">
            <apex:pageBlockSectionItem >
                <apex:inputText value="{!textMessageBody}" size="158" maxlength="158" style="width: 70%;"></apex:inputText>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited}">
            <apex:pageBlockSectionItem >
                <apex:outputPanel >
                <table>
                <tr>
                    <td><apex:commandButton action="{!sendTextMessages}" value="Send Text Invites!" rerender="resultmessages,sendTextMessageSection" status="SendStatus" /></td>
                    <td><apex:commandButton action="{!cancel}" value="Cancel" /></td>
                </tr>
                </table>
                </apex:outputPanel>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
        <apex:pageBlockSection columns="1" rendered="{!haveContactsBeenInvited==false}">
            <apex:pageBlockSectionItem >
                <apex:outputPanel >
                    <apex:commandButton action="{!cancel}" value="Ok"/>
                </apex:outputPanel>
            </apex:pageBlockSectionItem>
        </apex:pageBlockSection>
    </apex:pageBlock>
    </apex:outputPanel>
    <apex:outputPanel id="resultmessages">
        <apex:outputPanel >
            <apex:actionStatus id="SendStatus" startText="... Sending Text Messages ..." />
        </apex:outputPanel>
        <apex:outputPanel >
            {!resultMessage}
            <br/>
            <apex:commandButton action="{!cancel}" value="Ok" rendered="{!textMessagesSent==true}" />
        </apex:outputPanel>
    </apex:outputPanel>
    </apex:form>
</apex:page>
